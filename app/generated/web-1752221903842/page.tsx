'use client'

// Figma Colors: #000000, #ffffff, #ffffff, #ffffff, #ffffff
// app/layout.tsx
import './globals.css'
import { Inter } from 'next/font/google'
import {ClerkProvider} from '@clerk/nextjs'
import {zustandStore} from './store'
import {Provider} from 'zustand'

const inter = Inter({ subsets: ['latin'] })

export const metadata = {
  title: 'Create Next App',
  description: 'Generated by create next app',
}

export default function RootLayout({ children }: { children: React.ReactNode }) {
  return (
    <ClerkProvider>
      <Provider store={zustandStore}>
        <html lang="en">
          <body className={inter.className}>{children}</body>
        </html>
      </Provider>
    </ClerkProvider>
  )
}


// app/globals.css
@tailwind base;
@tailwind components;
@tailwind utilities;


// app/page.tsx
import {useClient} from 'next/navigation'
import {useState, useEffect} from 'react'
import {useStore} from './store'
import {Menu} from './components/Menu'
import {Reservation} from './components/Reservation'
import {Gallery} from './components/Gallery'
import {About} from './components/About'

export default function Home() {
  const router = useClient()
  const [isLoading, setIsLoading] = useState(true)
  const {getMenu, getReservations, getGalleryItems} = useStore()

  useEffect(() => {
    const fetchData = async () => {
      await getMenu()
      await getReservations()
      await getGalleryItems()
      setIsLoading(false)
    }
    fetchData()
  }, [])

  if (isLoading) return <p>Loading...</p>

  return (
    <div className="flex">
      <aside className="w-64 bg-brown-500 p-4">
        <About/>
      </aside>
      <main className="flex-grow p-4">
        <Menu/>
        <Reservation/>
        <Gallery/>
      </main>
    </div>
  )
}


// app/components/Menu.tsx
import {useStore} from '../store'
import {MenuCard} from './MenuCard'

export const Menu = () => {
  const {menu} = useStore()
  return (
    <div>
      <h2>Menu</h2>
      {menu.map(item => <MenuCard key={item.id} item={item}/>)}
    </div>
  )
}


// app/components/MenuCard.tsx
interface MenuItem {
  id: number;
  name: string;
  price: number;
  description: string;
  imageUrl: string;
  category: string;
  stock: number;
}

export const MenuCard: React.FC<{item: MenuItem}> = ({item}) => {
  return (
    <div className="bg-white p-4 rounded shadow-md mb-4">
      <img src={item.imageUrl} alt={item.name} className="w-32 h-32"/>
      <h3>{item.name}</h3>
      <p>{item.description}</p>
      <p>Price: {item.price}</p>
    </div>
  )
}


// app/components/Reservation.tsx
export const Reservation = () => {
  const {reservations} = useStore()
  return (
    <div>
      <h2>Reservations</h2>
      {reservations.map(reservation => (
        <div key={reservation.id}>
          <p>Name: {reservation.name}</p>
          <p>Time: {reservation.time}</p>
        </div>
      ))}
    </div>
  )
}


// app/components/Gallery.tsx
export const Gallery = () => {
  const {galleryItems} = useStore()
  return (
    <div>
      <h2>Gallery</h2>
      {galleryItems.map(item => (
        <img key={item.id} src={item.url} alt={item.description} className="w-64 h-48"/>
      ))}
    </div>
  )
}


// app/components/About.tsx
export const About = () => {
  return (
    <div>
      <h3>About Us</h3>
      <p>Why: Increase customer traffic and satisfaction.</p>
      <p>Who: Cafe owners, employees, and customers.</p>
      <p>Impact: Increased customer traffic, improved satisfaction, efficient operation.</p>
    </div>
  )
}


// app/store.ts
import create from 'zustand'
import {persist} from 'zustand/middleware'

interface MenuItem {
  id: number;
  name: string;
  price: number;
  description: string;
  imageUrl: string;
  category: string;
  stock: number;
}

interface ReservationItem {
  id: number;
  name: string;
  time: string;
}

interface GalleryItem {
  id: number;
  url: string;
  description: string;
}

interface StoreState {
  menu: MenuItem[];
  reservations: ReservationItem[];
  galleryItems: GalleryItem[];
  getMenu: () => Promise<void>;
  getReservations: () => Promise<void>;
  getGalleryItems: () => Promise<void>;
}

export const zustandStore = create(
  persist<StoreState>(
    (set) => ({
      menu: [],
      reservations: [],
      galleryItems: [],
      getMenu: async () => {
        const data = await fetch('/api/menu')
        const menu = await data.json()
        set({menu})
      },
      getReservations: async () => {
        const data = await fetch('/api/reservations')
        const reservations = await data.json()
        set({reservations})
      },
      getGalleryItems: async () => {
        const data = await fetch('/api/gallery')
        const galleryItems = await data.json()
        set({galleryItems})
      },
    }),
    {
      name: 'cafe-app-storage',
    }
  )
)


// pages/api/menu.ts
export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  // Replace with your actual menu data fetching logic
  const menu = [
    {id: 1, name: 'Coffee', price: 3, description: 'A cup of coffee', imageUrl: '', category: 'Coffee', stock: 10},
    {id: 2, name: 'Tea', price: 2, description: 'A cup of tea', imageUrl: '', category: 'Tea', stock: 15},
  ]
  res.status(200).json(menu)
}


// pages/api/reservations.ts
export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  // Replace with your actual reservation data fetching logic
  const reservations = [
    {id: 1, name: 'John Doe', time: '10:00'},
    {id: 2, name: 'Jane Doe', time: '11:00'},
  ]
  res.status(200).json(reservations)
}


// pages/api/gallery.ts
export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  // Replace with your actual gallery data fetching logic
  const galleryItems = [
    {id: 1, url: '', description: 'Image 1'},
    {id: 2, url: '', description: 'Image 2'},
  ]
  res.status(200).json(galleryItems)
}


This is a basic structure.  You'll need to replace placeholder data fetching with actual API calls to your database and implement  Clerk.js for authentication, Stripe integration for payments, and  more robust error handling and loading states.  Remember to install necessary packages: `next`, `typescript`, `tailwindcss`, `@shadcn/ui`, `zustand`, `framer-motion`, `@clerk/nextjs`, and any database and payment gateway SDKs.  Also,  replace placeholder image URLs with actual image URLs.  The Figma design elements are not directly integrated as the provided Figma data is insufficient for precise implementation.  You'll need to manually style components based on your Figma design.