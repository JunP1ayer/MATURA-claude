// app/layout.tsx
import './globals.css'
import { Inter } from 'next/font/google'
import {ClerkProvider} from '@clerk/nextjs'
import { ZustandProvider } from 'zustand'
import createUseStore from './store'

const inter = Inter({ subsets: ['latin'] })

export const metadata = {
  title: 'Create Next App',
  description: 'Generated by create next app',
}

export default function RootLayout({ children }: { children: React.ReactNode }) {
  return (
    <ClerkProvider>
      <ZustandProvider store={createUseStore()}>
        <html lang="en">
          <body className={inter.className}>{children}</body>
        </html>
      </ZustandProvider>
    </ClerkProvider>
  )
}


// app/page.tsx
'use client'

// Figma Colors: #000000, #ffffff, #ffffff, #ffffff, #ffffff
;
import { useState, useEffect } from 'react';
import { useStore } from './store';
import { Button, Card, Container, Heading, Image, Text } from '@shadcn/ui';
import { motion } from 'framer-motion';

export default function Home() {
  const [menu, setMenu] = useState<any[]>([]);
  const { addMenu, loading, error } = useStore();

  useEffect(() => {
    const fetchMenu = async () => {
      try {
        const res = await fetch('/api/menu');
        if (!res.ok) {
          throw new Error(`Error! status: ${res.status}`);
        }
        const data = await res.json();
        setMenu(data);
      } catch (err: any) {
        console.error("Error fetching menu:", err);
      }
    };
    fetchMenu();
  }, []);

  return (
    <main className="flex min-h-screen flex-col items-center justify-between p-24">
      <Container>
        <Heading>Our Menu</Heading>
        {loading && <Text>Loading...</Text>}
        {error && <Text color="red">Error: {error}</Text>}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          {menu.map((item: any) => (
            <motion.div key={item.id} whileHover={{ scale: 1.05 }} transition={{ type: 'spring', stiffness: 100 }}>
              <Card key={item.id}>
                <Image src={item.imageUrl} alt={item.menuName} />
                <Text>{item.menuName}</Text>
                <Text>{item.price}</Text>
                <Text>{item.allergyInfo}</Text>
              </Card>
            </motion.div>
          ))}
        </div>
      </Container>
    </main>
  );
}


// app/store.ts
import create from 'zustand';

interface Menu {
  menuName: string;
  price: string;
  imageUrl: string;
  allergyInfo: string;
  id: number;
}

interface Store {
  menu: Menu[];
  addMenu: (menu: Menu) => void;
  loading: boolean;
  error: string | null;
}

const createUseStore = () =>
  create<Store>((set) => ({
    menu: [],
    addMenu: (menu) => set((state) => ({ menu: [...state.menu, menu] })),
    loading: false,
    error: null,
  }));

export default createUseStore;


// pages/api/menu.ts
import type { NextApiRequest, NextApiResponse } from 'next'

export default function handler(
  req: NextApiRequest,
  res: NextApiResponse<any[]>
) {
  const menu = [
    { id: 1, menuName: 'Coffee', price: '$3', imageUrl: '/coffee.jpg', allergyInfo: 'None' },
    { id: 2, menuName: 'Cake', price: '$5', imageUrl: '/cake.jpg', allergyInfo: 'Contains nuts' },
    // Add more menu items here...
  ];
  res.status(200).json(menu)
}

// app/globals.css
@tailwind base;
@tailwind components;
@tailwind utilities;



**注意:** このコードは、Figmaデザインデータとユーザー要件に基づいて、基本的な機能を実装したものです。  完全なアプリケーションにするには、データベースとの連携、予約システムの統合、ニュース・お知らせ機能、ギャラリー機能、エラーハンドリング、アクセシビリティ対応、SEO最適化などを追加する必要があります。  また、`coffee.jpg` と `cake.jpg` のような画像ファイルも適切な場所に配置する必要があります。  Clerk.devの認証機能を使用するためには、Clerk.devアカウントを作成し、プロジェクトを設定する必要があります。  `/coffee.jpg` と `/cake.jpg` はプレースホルダーであり、実際の画像ファイルに置き換える必要があります。  さらに、`Figma basics` から抽出されたカラーパレットとフォントをTailwind CSSとアプリケーションに適切に統合する必要があります。  この例では、`shadcn/ui`コンポーネントの基本的な使用例を示しており、Figmaのデザインコンポーネントとの完全なマッピングは行っていません。